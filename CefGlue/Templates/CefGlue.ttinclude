<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #><#+

#region Helper Methods
public static string Capitalize(string str)
{
    return char.ToUpperInvariant(str[0]) + str.Substring(1);
}
#endregion

#region Struct Schema
class StructDef
{
    public StructDef()
    {
        Name = null;
        HasBase = true;
        HasSize = true;
        HasClear = false;
    }
    
    public StructDef(string name)
    {
        Name = name;
        HasBase = true;
        HasSize = true;
        HasClear = false;
    }

    public StructDef(string name, bool hasBase = true, bool hasSize = true, bool hasClear = false)
    {
        Name = name;
        HasBase = hasBase;
        HasSize = hasSize || hasBase;
        HasClear = hasClear;
    }

    public string Name { get; private set; }
    public bool HasBase { get; private set; }
    public bool HasSize { get; private set; }
    public bool HasClear { get; private set; }
}
#endregion

#region Handler Schema
class HandlerDef
{
    private string className;
    private string structName;
    private List<HandlerCallbackDef> callbacks;

    public HandlerDef()
    {
        this.callbacks = new List<HandlerCallbackDef>();

        this.Disposable = false;
    }

    public string GetBackStoreName(string name)
    {
        return "bs_" + name;
    }

    public string ClassName
    {
        get
        {
            if (string.IsNullOrWhiteSpace(this.className))
            {
                throw new InvalidOperationException("ClassName is not set.");
            }
            return this.className;
        }
        set { this.className = value; }
    }

    public string StructName
    {
        get
        {
            if (string.IsNullOrWhiteSpace(this.structName))
            {
                throw new InvalidOperationException("ClassName is not set.");       
            }
            return this.structName;
        }
        set { this.structName = value; }
    }

    public bool ReversibleNativePointer
    {
        get; set;
    }

    /// <summary>
    /// If true - then object implement's IDisposable interface.
    /// If false - object doesn't implement IDisposable interface.
    /// In both cases class provide protected virtual Dispose(bool disposing) method.
    /// </summary>
    public bool Disposable { get; set; }

    public IEnumerable<HandlerCallbackDef> GetCallbacks() { return this.callbacks.AsEnumerable(); }

    public void AddCallback(string structName, object obj = null)
    {
        var def = new HandlerCallbackDef {
            StructName = structName
        };

        if (obj != null) {
            throw new NotImplementedException();
        }

        AddCallback(def);
    }

    public void AddCallback(HandlerCallbackDef cb)
    {
        cb.Parent = this;
        this.callbacks.Add(cb);
    }
}

class HandlerCallbackDef
{
    private string name;

    public HandlerCallbackDef()
    {
    }

    public HandlerDef Parent { get; set; }

    public string ParentStructName { get { return this.Parent.StructName; } }

    public string Name
    {
        get
        {
            if (string.IsNullOrWhiteSpace(this.name))
            {
                this.name = string.Join("", this.StructName.Split('_').Select(_ => Capitalize(_)));
            }
            return this.name;
        }
        set
        {
            this.name = value;
        }
    }

    public string Summary { get; set; }
    public string StructName { get; set; }

    public virtual string Type { get { return Name + "Handler"; } }

    public string FieldName
    {
        get
        { 
            var name = Name;
            return "_" + name.Substring(0, name.Length >= 2 ? 2 : name.Length).ToLowerInvariant()
                + name.Substring(name.Length >= 2 ? 2 : name.Length);
        }
    }

    public virtual bool DisposeField { get { return false; } }
    public virtual bool ClientCallback { get { return false; } }

    public virtual string DelegateName { get { return ParentStructName + "." + StructName + "_delegate"; } }
    public virtual string DelegateFieldName { get { return Parent.GetBackStoreName(StructName); } }

    public virtual string NativeCallbackName { get { return StructName; } }
    public virtual string NativeType { get { throw new NotSupportedException(); } }
}
#endregion

#region Proxy Schema
class ProxyDef
{
    private List<ProxyMethodDef> _methods;

    public ProxyDef()
    {
        _methods = new List<ProxyMethodDef>();
        GenerateMethodAccessors = false;
    }

    public int Index { get; private set; }

    public string ClassName { get; set; }

    public string StructName { get; set; }

    public IEnumerable<ProxyMethodDef> GetMethods() { return _methods.AsEnumerable(); }

    public void AddMethod(string structName)
    {
        AddMethod(new ProxyMethodDef
        {
            StructName = structName
        });
    }

    public void AddMethod(ProxyMethodDef method)
    {
        method.Parent = this;
        _methods.Add(method);
    }

    public void ApplyMethodIndexes()
    {
        for (var i = 0; i < _methods.Count; i++) {
            _methods[i].Index = i + 3; // indexes 0,1,2 reserved to add_ref, release and get_refct
        }
    }

    public bool GenerateMethodAccessors { get; set; }
}

class ProxyMethodDef
{
    public ProxyMethodDef()
    {
    }

    public int Index { get; internal set; }

    public ProxyDef Parent { get; set; }
    public string StructName { get; set; }

    public string NativeDelegateType
    {
       get { return Parent.StructName + "." + StructName + "_delegate"; }
    }
}
#endregion

#>