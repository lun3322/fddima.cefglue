<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.CodeDom.Compiler" #><#+

private class WebBrowserDecoratorSchema
{
    private Dictionary<string, bool> explicitDecls;
    private Dictionary<string, List<string>> aliases;
    
    public WebBrowserDecoratorSchema()
    {
        this.NamespaceName = "__NamespaceName__";
        this.ClassName = "__ClassName__";
        this.CoreMemberName = "core";
        this.explicitDecls = new Dictionary<string, bool>();
        this.aliases = new Dictionary<string, List<string>>();
    }
    
    public string NamespaceName { get; set; }
    public string ClassName { get; set; }
    public string CoreMemberName { get; set; }
    public Dictionary<string, string> Aliases { get; private set; }
    
    public void SetExplicit(string name)
    {
        this.explicitDecls[name] = true;
    }
    
    public void SetImplicit(string name)
    {
        this.explicitDecls[name] = false;
    }
    
    public bool IsExplicitDecl(string name)
    {
        bool result;
        if (this.explicitDecls.TryGetValue(name, out result))
        {
            return result;
        }
        else return false;
    }
    
    public void AddAlias(string name, string aliasedName)
    {
        if (!this.aliases.ContainsKey(name)) {
            this.aliases[name] = new List<string>();
        }
        this.aliases[name].Add(aliasedName);
    }
    
    public IEnumerable<string> GetAliases(string name)
    {
        if (this.aliases.ContainsKey(name)) return this.aliases[name];
        else return emptySequence;
    }
    
    private IEnumerable<string> emptySequence = new List<string>();
}

private readonly WebBrowserDecoratorSchema Schema = new WebBrowserDecoratorSchema();

private void GenerateWebBrowserDecorator()
{
    var type = typeof(CefGlue.WebBrowser.IWebBrowser);
    var types = (new Type[] { type }).Concat( type.GetInterfaces() );

    var events = types.SelectMany(_ => _.GetEvents());
    var properties = types.SelectMany(_ => _.GetProperties());
    var methods = types.SelectMany(_ => _.GetMethods());
    
    var written = new HashSet<MethodInfo>();
#>//
// DO NOT MODIFY! THIS IS AUTOGENERATED FILE!
//
namespace <#=this.Schema.NamespaceName#>
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using CefGlue;
    using CefGlue.JSBinding;
    using CefGlue.WebBrowser;

    public partial class <#=this.Schema.ClassName#> : <#=string.Join(", ", types.Select(_ => GetTypeName(_)))#>
    {
<#+
    foreach(EventInfo evt in events)
    {
        WriteEvent(evt);
        written.Add(evt.GetAddMethod());
        written.Add(evt.GetRemoveMethod());
        
        foreach(var name in this.Schema.GetAliases(evt.Name))
        {
            WriteEvent(evt, name);
        }
    }

    foreach(var prop in properties)
    {
        WriteProperty(prop);
        written.Add(prop.GetGetMethod());
        written.Add(prop.GetSetMethod());
        
        foreach(var name in this.Schema.GetAliases(prop.Name))
        {
            WriteProperty(prop, name);
        }
    }
    
    foreach(var method in methods)
    {
        if (written.Contains(method)) continue;
        WriteMethod(method);
        written.Add(method);
        
        foreach(var name in this.Schema.GetAliases(method.Name))
        {
            WriteMethod(method, name);
        }
    }
#>  
    }
}
<#+
}

    private void WriteEvent(EventInfo evt, string name = null)
    {
        bool explicitDecl = name == null ? this.Schema.IsExplicitDecl(evt.Name) : false;
        var accessMod = explicitDecl ? "" : "public ";
        var namePrefix = explicitDecl ? GetTypeName(evt.DeclaringType)+"." : "";
        name = name == null ? evt.Name : name;

        WriteAttributes(evt);
        #>
        <#=accessMod#>event <#=GetTypeName(evt.EventHandlerType)#> <#=namePrefix#><#=name#>
        {
            add { this.<#=this.Schema.CoreMemberName#>.<#=evt.Name#> += value; }
            remove { this.<#=this.Schema.CoreMemberName#>.<#=evt.Name#> -= value; }
        }

<#+
    }
    
    private void WriteProperty(PropertyInfo prop, string name = null)
    {
        bool explicitDecl = name == null ? this.Schema.IsExplicitDecl(prop.Name) : false;
        var accessMod = explicitDecl ? "" : "public ";
        var namePrefix = explicitDecl ? GetTypeName(prop.DeclaringType)+"." : "";
        name = name == null ? prop.Name : name;

        WriteAttributes(prop);
        #>
        <#=accessMod#><#=GetTypeName(prop.PropertyType)#> <#=namePrefix#><#=name#>
        {
<#+ if (prop.GetGetMethod() != null) { #>
            get { return this.<#=this.Schema.CoreMemberName#>.<#=prop.Name#>; }
<#+ } #>
<#+ if (prop.GetSetMethod() != null) { #>
            set { this.<#=this.Schema.CoreMemberName#>.<#=prop.Name#> = value; }
<#+ } #>
        }

<#+
    }
    
    private void WriteMethod(MethodInfo method, string name = null)
    {       
        bool explicitDecl = name == null ? this.Schema.IsExplicitDecl(method.Name) : false;
        var accessMod = explicitDecl ? "" : "public ";
        var namePrefix = explicitDecl ? GetTypeName(method.DeclaringType)+"." : "";
        name = name == null ? method.Name : name;
        
        WriteAttributes(method);
        #>
        <#=accessMod#><#=GetTypeName(method.ReturnType)#> <#=namePrefix#><#=name#><#=FormatGenericArguments(method)#>(<#=FormatParameters(method, true)#>)<#=FormatGenericConstrains(method)#>
        {
            <#+ if (method.ReturnType != typeof(void)) { #>return <#+ } 
          #>this.<#=this.Schema.CoreMemberName#>.<#=method.Name#><#=FormatGenericArguments(method)#>(<#=FormatParameters(method, false)#>);
        }

<#+
    }
    
    private void WriteAttributes(MemberInfo member)
    {
        var browsable = GetAttribute<BrowsableAttribute>(member);
        if (browsable != null)
        {#>
        [Browsable(<#=browsable.Browsable ? "true" : "false" #>)]
<#+     }
        
        var dsv = GetAttribute<DesignerSerializationVisibilityAttribute>(member);
        if (dsv != null)
        {#>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.<#=dsv.Visibility.ToString()#>)]
<#+     }
    }
    
    private T GetAttribute<T>(MemberInfo member) where T : Attribute
    {
        var attrs = member.GetCustomAttributes(typeof(T), false);
        if (attrs.Length == 0) return null;
        else if (attrs.Length == 1) return (T)attrs[0];
        else throw new NotSupportedException();
    }
        
    private string FormatGenericArguments(MethodInfo method)
    {
        if (method.IsGenericMethod) {
            var gArgs = method.GetGenericArguments();
            return "<" + string.Join(", ", gArgs.Select(_ => _.Name)) + ">";
        }
        else return "";
    }
    
    private string FormatParameters(MethodInfo method, bool declaration)
    {
        var args = method.GetParameters();
        return string.Join(", ", args.Select(_ => {
            if (_.IsOptional) throw new NotSupportedException();
            if (_.IsOut) throw new NotSupportedException();
            var typeName = GetTypeName(_.ParameterType);
            var name = _.Name;
            if (declaration)
            {
                return (IsParams(_) ? "params " : "")
                    + typeName + " " + name;
            }
            else return name;
        }));
    }
    
    private string FormatGenericConstrains(MethodInfo method)
    {
        if (!method.IsGenericMethod) return "";
        
        StringBuilder sb = new StringBuilder();
        
        var args = method.GetGenericArguments();
        foreach(Type arg in args)
        {
            if ((arg.GenericParameterAttributes != GenericParameterAttributes.None)
                || arg.GetGenericParameterConstraints().Length > 0)
            {
                if (sb.Length == 0) sb.Append(" where ");
                else sb.Append(", ");
            
                sb.Append(arg.Name + " : ");
                if ((arg.GenericParameterAttributes & GenericParameterAttributes.ReferenceTypeConstraint) != 0)
                {
                    sb.Append("class");
                }
                
                var constrains = arg.GetGenericParameterConstraints();
                
                if (constrains.Length != 0) throw new NotImplementedException();
                foreach(Type constrain in constrains)
                {
                    // sb.Append(constrain.Name);
                }
            }
        }
        
        return sb.ToString();
    }

    private CodeDomProvider codeDomProvider = CodeDomProvider.CreateProvider("CSharp");

    private string GetTypeName(Type type)
    {
        if (type.IsGenericParameter) return type.Name;

        var reference = new System.CodeDom.CodeTypeReference(type.FullName);
        var name = codeDomProvider.GetTypeOutput(reference);
    
        if (name.StartsWith("System.Collections.Generic."))
        {
            name = name.Substring("System.Collections.Generic.".Length);
        }
        else if (name.StartsWith("System.")) {
            name = name.Substring("System.".Length);
        }
        else if (name.StartsWith("CefGlue.WebBrowser.")) {
            name = name.Substring("CefGlue.WebBrowser.".Length);
        }
        else if (name.StartsWith("CefGlue.JSBinding.")) {
            name = name.Substring("CefGlue.JSBinding.".Length);
        }
        else if (name.StartsWith("CefGlue.")) {
            name = name.Substring("CefGlue.".Length);
        }
        
        name = name.Replace("<CefGlue.WebBrowser.", "<");
        
        return name;
    }
    
    private static bool IsParams(ParameterInfo param)
    {
        return param.GetCustomAttributes(typeof(ParamArrayAttribute), false).Length > 0;
    }
    
#>